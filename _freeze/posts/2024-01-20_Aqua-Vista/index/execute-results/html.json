{
  "hash": "f1fcc368ca42580762a552991139c4b4",
  "result": {
    "markdown": "---\ntitle: \"Aqua Vista College Database\"\nsubtitle: \"A comprehensive case study in database design\"\nexecute: \n  \n  eval: true\nauthor: \"Edun Joshua\"\ndate: \"2024-01-20\"\ntoc: true\ncategories: [SQL, data engineering, database design and management]\nimage: \"Boscombe Beach University (Logical) v2.jpeg\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n![](Boscombe%20Timeline%20Diagram%20Graph.png){fig-align=\"center\"}\n\n## Task Introduction\n\nBased on the case study (interview scripts and required reports) at the end of this brief, provide the following:\n\n-   **Conceptual ERD with justifications of design choices**\n\n-   **Logical Design utilising skeleton tables**\n\n    -   Primary Keys are underlined, and Foreign Keys have an asterisk next to them. e.g. table_name(table_id, table_attribute, other_table_id\\*)\n\n-   **Indication of report creation**\n\n    -   Indicate which tables from your design would be used, and what are the common values.\n\n-   **Outline of data accuracy strategy**\n\n    -   What concrete measures would you take to ensure data can be analysed to aid prediction?\n\n[**To achieve a distinction:**]{.underline}\n\n-   The Conceptual ERD fully covers the case study's entities and relationships. There are justifications provided for the design choices based on the case study's statements. The justifications are thought through, concrete and well-argued.\n\n-   The Logical Design is in the required format, and it is directly derived from and related to the produced Conceptual ERD. Where design choices needed to be taken, they are clearly indicated and justified. Problematic relationships, such as many-to-many relationships have been resolved correctly.\n\n-   A clear indication which entities/tables had to be included to produce the required reports, and which matching fields were used.\n\n-   A mature and concrete strategy to ensure data accuracy is provided which is relevant for the given case study.\n\n## Conceptual ERD\n\n[![Aqua Vista College Database - Conceptual ERD. (Click to view full image online)](Boscombe Beach University (Conceptual) v3.jpeg){fig-align=\"center\"}](https://drive.google.com/file/d/1GN0GldyXjL1rbZR1xtUoeO48Zm1_WF1B/view?usp=sharing)\n\n## Logical Design\n\n[![Aqua Vista College - Logical Design. (Click to view full image online)](Boscombe Beach University (Logical) v2.jpeg){fig-align=\"center\"}](https://drive.google.com/file/d/13HxRuYCcAWOEFdGclFkyBaL3onfc-kpu/view?usp=sharing)\n\n## Design Justifications\n\n#### Office Allocation:\n\nImplementing a dedicated \"`Office`\" entity and bridge table for academic staff assignments unlocks the following advantages: **flexibility** to track office occupancy dynamically with start and end dates, **data efficiency** by avoiding redundancy through centralized office details and shared/single occupancy flags, and **clarity** by decoupling physical locations from reporting structures and staff attributes, leading to a more interpretable model.\n\n#### Line Management\n\nRepresenting the Academic Staff reporting structure within the university is elegantly achieved through a self-referencing `AcademicStaff` entity. This leverages a natural one-to-one relationship referencing the line_manager_id attribute, allowing each staff member to have a designated manager while managers oversee multiple staff as needed. This avoids the redundancy of a dedicated line manager table, maintaining streamlined queries and ensuring consistent data. The self-referencing approach eliminates the need for additional joins, keeping the model clear and easily traversable.\n\n#### Resolving the many-to-many relationship between AcademicStaff and Unit\n\nThe Head of Department interview revealed that: some academics teach several units, some none, and units can have multiple instructors. A dedicated bridge table elegantly untangles this many-to-many relationship.\n\nBeyond capturing the current teaching relationships, this design offer these benefits:\n\n-   Dynamic tracking: Start and end dates record teaching history, combating the \"slowly changing dimensions\" issue and aiding analysis of past assignments.\n-   Future-proof scalability: Easily extend the model to track different appointment types or add new analytical data.\n-   Efficient queries: The bridge table centralizes teaching data, making queries related to instructors or units much faster than sifting through individual records.\n\nThis robust design allows valuable insights for analysis, reporting, and career progression tracking, while laying a flexible foundation for future changes.\n\n#### Modelling Academic Staff's Research Interests\n\nFollowing the Head of Department's emphasis - “all academic staff members are required to record their research interests” - research interests are modeled as a mandatory one-to-many relationship with academic staff. Every staff member must actively record their research interests, and this relationship is reflected by the Crow's Foot notation in the relationship between the entities.\n\n#### Subjects and Units\n\nA many-to-many relationship exists between these two entities, as outlined in the requirements derived from the interview with the Head of Department. This relationship is effectively resolved by a bridge table, aligning with the fact that a `Unit` may encompass multiple `Subjects`, and conversely, a `Subject` can be associated with multiple `Units`.\n\nThe Industry Liaison Lead validates that subjects are open to proposals from companies. To address this requirement, a *proposed_by_company* foreign key field is incorporated, establishing a connection with the Industry Partner entity. This ensures that the relationship between subjects and proposing companies is appropriately represented in the database structure.\n\n#### Course Enrollment\n\nThe interview underscores that students dedicate themselves to a single course at a time, establishing a one-to-one relationship between a student and their presently enrolled course. Although students eventually undertake multiple courses throughout their program, this is done sequentially, indicating that they are not concurrently enrolled in several courses.\n\nThis design facilitates the historical tracking of student enrollment. While the primary focus is on the current course, there arises a necessity to trace past courses undertaken by a student. Introducing a bridge table offers an efficient means of storing and retrieving historical enrollment data without cluttering the `Student` or **`Course`** entities.\n\nThe bridge table offers flexibility to manage potential scenarios such as course changes or leaves of absence, ensuring a precise record of all courses a student has enrolled in during their program. The *course_completion_status* attribute enables this record-keeping through a check constraint represented as an ENUM datatype with values like \"Completed,\" \"Ongoing,\" and \"Withdrawn.\"\n\nAdditional attributes may be incorporated into the bridge table for each enrollment record, including start and end dates, course completion status, grades, or even reasons for withdrawal if applicable. This supplementary information proves valuable for subsequent analysis and reporting purposes.\n\n#### Unit, Attendance and Session\n\nThis approach incorporates a bridge table between students and sessions to record attendance. Reflecting the Head of Department's statement that \"A session can be a lecture, seminar, or lab associated with a unit,\" an ENUM constraint on the *session_type* attribute ensures adherence to these three specified values.\n\nMoreover, as per the emphasis on sessions potentially being part of extra-curricular events with external speakers, the design introduces a distinct entity, \"*extra-curricular_event*,\" to capture this information. The relationship is non-mandatory, and the Crow’s Foot notation appropriately signifies this flexibility.\n\nGiven that units encompass sessions and sessions relate to subjects, the design establishes a connection between the *session_id* attribute and the *subject_id* attribute through the `unit_subject` bridge table. This alignment is logical, considering each unit-subject combination functions as an independent entity, allowing for variations in their respective sessions.\n\nTo address the requirement that a subject may not yet be part of any unit or session, the presence of an *approval_status* ENUM attribute effectively manages this condition.\n\n#### Industrial Partnership\n\nThe interview with the Industrial Liaison Lead sheds light on the interaction between the school and industry partners. Industrial partners are embodied in an `Industry Partner` entity, contributing through the delivery of `Talks` on specific subjects. This is depicted as a one-to-many optional relationship with the `Talks` entity, along with a one-to-one relationship between `Talks` and `Subject`.\n\nIn the discussion, the official affirms that companies can propose multiple subjects, and conversely, a subject can be proposed by multiple companies, establishing a resolved many-to-many relationship through the `industry_partners_subject` bridge table, linking Industry `Partner` to `Subject`. This bridge table serves to capture additional proposal details, including the proposal date and description.\n\nRecognizing that not all subjects are covered by industry partners, an optional relationship is indicated between `subject` and `industry_partner_subject` using Crow’s Foot notation. The *subject_type* has an ENUM type, offering values \"traditional\" and \"proposed.\"\n\nThe *subject_type* attribute distinguishes a subject's origin, marking it as either proposed by an industry partner or part of Aqua Vista’s traditional curriculum.\n\n#### Talks and Activity\n\nTalks may encompass various activities, and it is affirmed that recording these activities is crucial. As a solution, an activity entity has been established, featuring a *talk_id* foreign key referencing the Talks entity. Each talk or activity is associated with a designated contact person, fulfilling this requirement through the inclusion of a *contact_person_phone* attribute that stores the contact information of the designated person. I could not confirm if the contact person is a staff of the school, otherwise, I would relate this attribute to the academic_staff entity.\n\nRecognizing that not all partners engage in delivering talks, the model accommodates this by incorporating an optional one-to-many relationship between industry partners and talks. This ensures flexibility in representing instances where some industry partners may not be involved in delivering talks.\n\n## Indication of report creation\n\n### Identifying the sessions most students attended out of all subjects delivered by an external company\n\n**Tables:**\n\n1.  **Attendance:** Tracks student participation, linking **student_id** to **session_id**.\n2.  **Session:** Holds information about individual sessions, including the associated **unit_subject_id**.\n3.  **Unit_Subject:** Bridges sessions and subjects, connecting **session_id** to **unit_subject_id**.\n4.  **Subject:** Captures subject details, including a unique **subject_id** and a \"**subject_type**\" flag indicating external involvement.\n\n**Common Values:**\n\n-   **SessionID:** Unique identifier for each session, linking `Attendance` and `Session` data.\n-   **UnitSubjectID:** Unique identifier for each `Unit-Subject`, acting as the bridge between `Session` and `Subject` tables.\n-   **SubjectID:** Unique identifier for each `Subject`, enabling filtering for those externally proposed in the `Subject` table.\n\n**Methodology:**\n\n1.  **Filter Sessions:** Using the `Subject` table's \"subject_type\" flag as a filter, I select only sessions linked to subjects tagged as \"*External*\"\n2.  **Join and Aggregate:** By joining Attendance, Session, Unit_Subject_Junction, and Subject tables on their respective common values, we can count the number of students attending each session.\n3.  **Identify Maximum Attendance:** Finally, we sort the aggregated data by student attendance in descending order and locate the session with the highest attendance count, pinpointing the most popular session delivered by an external company.\n\nThe following SQL query will deliver the report:\n\n> `SELECT s.SessionID, COUNT(a.StudentID) AS AttendanceCount`\n>\n> `FROM Attendance a JOIN Session s ON a.SessionID = s.SessionID`\n>\n> `JOIN Unit_Subject_Junction usj ON s.UnitSubjectID = usj.UnitSubjectID`\n>\n> `JOIN Subject sub ON usj.SubjectID = sub.SubjectID`\n>\n> `WHERE sub.subject_type = \"External\"GROUP BY s.SessionID ORDER BY AttendanceCount DESC LIMIT 1;`\n\n### Identifying the unit with the most sessions delivered by a company on any subject\n\nTo reveal the unit hosting the most sessions delivered by companies across all subjects, the following entities are identified.\n\n**Tables:**\n\n1.  **Session**: Captures session details, including the associated **unit_subject_id**.\n\n2.  **Unit_Subject**: Bridges sessions to units and subjects, connecting **session_id** to **unit_subject_id** and **subject_id**.\n\n3.  **Unit**: Holds unit information, including the unique **unit_id**.\n\n4.  **Subject**: Stores subject details, including the **subject_type** flag indicating company involvement.\n\n**Common Values:**\n\n1.  **UnitSubjectID**: Unique identifier for each unit-subject, linking `Session` and `Unit_Subject` tables.\n2.  **UnitID**: Unique identifier for each Unit, connecting `Unit_Subject` and `Unit` tables.\n3.  **SubjectID**: Unique identifier for each subject, enabling filtering for those marked as externally proposed in the Subject table.\n\n**Methodology:**\n\n1.  **Filter Company-Delivered Sessions**: Employ the `WHERE` clause to select only sessions linked to subjects where the **subject_type** flag is \"Exernal\". This ensures we focus on sessions originating from external partnerships.\n\n2.  **Join and Aggregate**: By joining `Session`, `Unit_Subject`, and `Unit` tables on their respective common values, we associate sessions with their corresponding units and count the total number of sessions per unit.\n\n3.  **Identify Top Unit**: We order the aggregated data by session count in descending order. The unit at the top boasts the highest number of sessions delivered by a company, making it the champion of external collaborations.\n\nThe following SQL query will deliver the report:\n\n> `SELECT u.unit_id, u.unit_name, COUNT(s.session_id) AS session_count`\n>\n> `FROM Session s JOIN Unit_Subject_Junction usj ON s.unit_subject_id = usj.unit_subject_id`\n>\n> `JOIN Unit u ON usj.unit_id = u.unit_id`\n>\n> `JOIN Subject sub ON usj.subject_id = sub.subject_id`\n>\n> `WHERE sub.subject_type = \"External\"`\n>\n> `GROUP BY u.unit_id, u.unit_name ORDER BY session_count DESC LIMIT 1;`\n\n## Identifying The Academic staff with the most Research Interests\n\nTo uncover the academic staff member with the most diverse research interests within your Aqua Vista College, the database design offers the insights through two tables:\n\n**Tables:**\n\n-   **academic_staff:** This table holds core information about staff members, including their unique `staff_id` and `first_name`.\n-   **research_interests:** This table captures details about staff members' research pursuits, linking them to individual staff through the `staff_id` and providing descriptive `research_title` information.\n\n**The Bridge: Shared Values:**\n\n`staff_id`. links these 2 tables together. This unique identifier, present in both tables, allows to seamlessly connect each staff member with their respective research interests.\n\n**Methodology:**\n\n1.  **Connecting the Dots:** We'll employ a JOIN operation to merge the `academic_staff` and `research_interests` tables on the `staff_id` column. This creates a unified view where each staff member is accompanied by their research areas.\n2.  **Quantifying Passion:** For each staff member, we'll utilize the `COUNT()` function to determine the total number of research interests listed in the `research_interests` table associated with their `staff_id`. This effectively quantifies their research diversity.\n3.  **Crowning the Champion:** Finally, we'll order the combined data by the `count` of research interests in descending order. The staff member at the top, boasting the highest count, emerges as the champion of diversified research pursuits within your institution.\n\nThe following SQL query will deliver the report:\n\n> `SELECT as.staff_id, as.first_name, COUNT(ri.research_id) AS research_interest_count`\n>\n> `FROM academic_staff as JOIN research_interests ri ON as.staff_id = ri.staff_id`\n>\n> `GROUP BY as.staff_id, as.first_name`\n>\n> `ORDER BY research_interest_count DESC LIMIT 1;`\n\n## Data Accuracy Strategy\n\n### Data Accuracy Strategy for Institutional Research and Teaching Analysis:\n\n***Objective: Establish the database reliably for analyzing research interests, teaching involvement, and other key academic elements.***\n\n**Concrete Measures:**\n\nEnum Constraints for Research Interests: Apply ENUM constraints, such as for the \"category\" field in the academic_staff table, restricting values to a predefined set (\"lecturers\" or \"demonstrators\"). Integrate drop-down menus in the front-end to facilitate user selection, minimizing ambiguity and ensuring consistency.\n\nTeaching Units: Implement lookups or autocomplete features for existing units in the front-end, preventing typographical errors and eliminating duplicate entries during data entry.\n\nEnforce Temporal Validity in Office Allocation: Enact data integrity rules to prohibit overlapping occupancy periods or exceeding office capacity, enhancing accuracy in office allocation records.\n\nEnsure Acyclic Relationships: Incorporate checks to validate acyclic relationships within the line-management hierarchy, preventing the formation of circular dependencies and ensuring a transparent organizational structure.\n\nCascade Deletion: Employ cascading actions for the line_manager_id foreign key. By using \"ON DELETE CASCADE\" and \"ON UPDATE CASCADE\" in SQL, ensure that changes to staff members cascade appropriately, maintaining referential integrity.\n\nPeriodic Audits: Conduct routine data consistency checks to identify and rectify duplicates or incomplete entries, enhancing overall data accuracy.\n\nRandom Sampling: Implement manual verification through random sampling of research interests and teaching assignments against employee resumes or course schedules, providing an additional layer of accuracy validation.\n\nPeer Review: Foster departmental reviews of research areas and unit affiliations to encourage collective scrutiny and improvement of data accuracy.\n\n### Data Accuracy Strategy for Enhancing Student Attendance and Course Insights\n\n***Objective: Establish a foundation of reliable data to facilitate accurate attendance tracking, course optimization, and predictive student success analysis.***\n\n**Concrete Measures:**\n\nCourse and Unit Information: Use ENUM constraint to ensure that data entered into each field adheres to predefined standards. For instance, enforce constraints on fields like attendance_status to accept only valid values (e.g., \"present,\" \"absent\").\n\nImplement validation rules to prevent duplicate entries and maintain course levels within defined ranges.\n\nAttendance Data: Use foreign key constraints in the physical model to restrict attendance entry to valid student IDs, session IDs, and dates, preventing errors and inconsistencies.\n\nSession Details: Ensure temporal validity (i.e. using the start_date and end_date attributes) by designing checks in the physical model to avoid conflicts and maintain data integrity.\n\n## SQL CREATE statements\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE course (\n  course_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  course_title VARCHAR(255),\n  course_name VARCHAR(255),\n  course_level VARCHAR(10)\n);\nCREATE TABLE student (\n  student_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  first_name VARCHAR(255),\n  last_name VARCHAR(255),\n  date_of_birth DATE,\n  email VARCHAR(255),\n  phone_number INTEGER\n);\nCREATE TABLE course_enrolment (\n  student_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  course_id INTEGER,\n  course_completion_status ENUM(Completed, course_enrolment),\n  grade ENUM(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"),\n  phone_number INTEGER,\n  start_date DATE,\n  end_date DATE,\n  CONSTRAINT FK_course_enrolment.course_id FOREIGN KEY (course_id) \n  REFERENCES course(course_id) ON UPDATE CASCADE ON DELETE RESTRICT, -- Update updated course_ids but do not allow deletions in the parent table,\n  CONSTRAINT FK_course_enrolment.student_id FOREIGN KEY (student_id) \n  REFERENCES student(student_id) ON UPDATE CASCADE ON DELETE RESTRICT -- Update updated student_ids but do not allow deletions in the parent table\n);\nCREATE TABLE industry_partners (\n  company_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  company_name VARCHAR(50),\n);\nCREATE TABLE talks (\n  talk_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  subject_id INTEGER,\n  date DATE,\n  contact_person_phone INTEGER,\n  company_id INTEGER,\n  CONSTRAINT FK_talks.company_id FOREIGN KEY (company_id) \n  REFERENCES industry_partners(company_id) ON UPDATE CASCADE ON DELETE CASCADE, -- Cascade updates and deletions to the parent table,\n  CONSTRAINT FK_talks.subject_id FOREIGN KEY (subject_id) \n  REFERENCES industry_partners(subject_id) ON UPDATE CASCADE ON DELETE CASCADE -- Cascade updates and deletions to the parent table\n);\nCREATE TABLE activity (\n  activity_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  talk_id INTEGER,\n  activity_name VARCHAR(255),\n  CONSTRAINT FK_activity.talk_id FOREIGN KEY (talk_id) REFERENCES talks(talk_id)\n);\nCREATE TABLE research_interest (\n  research_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  staff_id INTEGER,\n  research_area VARCHAR(50),\n  research_title VARCHAR(255),\n  CONSTRAINT FK_research_interest.staff_id FOREIGN KEY (staff_id) REFERENCES academic_staff(staff_id)\n);\nCREATE TABLE subject (\n  subject_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  subject_name VARCHAR(50),\n  description TEXT,\n  approval_status ENUM(\"Approved\", \"Pending\", \" Rejected\") subject_type ENUM(Traditional, External) is_extra - curricular BOOLEAN\n);\nCREATE TABLE unit (\n  unit_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  unit_title VARCHAR(50)\n);\nCREATE TABLE unit_subject (\n  unit_subject_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  unit_id INTEGER,\n  subject_id INTEGER,\n  CONSTRAINT FK_unit_subject.unit_id FOREIGN KEY (unit_id) REFERENCES unit(unit_id),\n  CONSTRAINT FK_unit_subject.subject_id FOREIGN KEY (subject_id) REFERENCES subject(subject_id)\n);\nCREATE TABLE session (\n  session_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  unit_subject_id INTEGER,\n  date DATE,\n  session_type ENUM(\"Lecture\", \"Seminar\", \"Lab\"),\n  CONSTRAINT FK_session.unit_subject_id FOREIGN KEY (unit_subject_id) REFERENCES unit_subject(unit_subject_id)\n);\nCREATE TABLE office (\n  office_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  office_name VARCHAR(255),\n  location VARCHAR(255),\n  capacity NUMERIC\n);\nCREATE TABLE academic_staff (\n  staff_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  first_name VARCHAR(255),\n  last_name VARCHAR(255),\n  category ENUM(\"lecturers\", \"demonstrators\"),\n  line_manager_id INTEGER,\n  CONSTRAINT FK_academic_staff.staff_id FOREIGN KEY (line_manager_id) REFERENCES academic_staff(staff_id)\n);\nCREATE TABLE attendance (\n  attendance_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  student_id INTEGER,\n  session_id INTEGER,\n  date DATE,\n  attendance_status ENUM(\"Present\", \"Absent\", \"Excused\"),\n  CONSTRAINT FK_attendance.session_id FOREIGN KEY (session_id) REFERENCES session(session_id),\n  CONSTRAINT FK_attendance.student_id FOREIGN KEY (student_id) REFERENCES student(student_id)\n);\nCREATE TABLE office_allocation (\n  staff_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  office_id INTEGER,\n  start_date DATE,\n  end_date DATE,\n  CONSTRAINT FK_office_allocation.staff_id FOREIGN KEY (staff_id) REFERENCES academic_staff(staff_id),\n  CONSTRAINT FK_office_allocation.office_id FOREIGN KEY (office_id) REFERENCES office(office_id)\n);\nCREATE TABLE industry_partners_subject (\n  company_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  subject_id INTEGER,\n  description TEXT,\n  date_of_proposal DATE,\n  CONSTRAINT FK_industry_partners_subject.subject_id FOREIGN KEY (subject_id) REFERENCES subject(subject_id),\n  CONSTRAINT FK_industry_partners_subject.company_id FOREIGN KEY (company_id) REFERENCES industry_partners(company_id)\n);\nCREATE TABLE staff_unit_assignments (\n  staff_id INTEGER,\n  unit_id INTEGER,\n  role ENUM(\"unit coordinator\", \"lecturer\",\"assistant\"),\n  start_date DATE,\n  end_date DATE,\n  CONSTRAINT FK_staff_unit_assignments.unit_id FOREIGN KEY (unit_id) REFERENCES unit(unit_id),\n  CONSTRAINT FK_staff_unit_assignments.staff_id FOREIGN KEY (staff_id) REFERENCES academic_staff(staff_id)\n);\nCREATE TABLE extra-curricular_events (\n  event_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n,\n  session_id INTEGER,\n  date DATE,\n  external_speaker VARCHAR(255),\n  CONSTRAINT FK_extra-curricular_events.session_id FOREIGN KEY (session_id) REFERENCES session(session_id)\n);\n\n```\n:::\n\n\n## Conclusion\n\nIn summary, this project is a sophisticated and comprehensive approach to database design, incorporating various concepts for accuracy, flexibility, and efficiency. The use of ENUM constraints, foreign key relationships, and validation rules ensures consistent data across tables. Bridge tables resolve many-to-many relationships, enabling dynamic tracking, historical analysis, and scalability. Handling potential acyclic relationships, cascading actions, and periodic audits enhances data model integrity, creating a strong foundation for analytical insights. The project meets immediate requirements and establishes a groundwork for future adaptability, reflecting a nuanced understanding of Aqua Vista College's operational intricacies. This solution ensures the database meets current needs and remains resilient to changing educational and analytical demands.\n\n[Back to top](https://joshuaolubori.onrender.com/posts/2024-01-20_Aqua-Vista/#task-introduction)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}