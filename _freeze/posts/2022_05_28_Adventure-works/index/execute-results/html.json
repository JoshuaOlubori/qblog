{
  "hash": "a955aad789af76796a0651bce8c93a4c",
  "result": {
    "markdown": "---\ntitle: \"Sales Monitoring Dashboard\"\nsubtitle: \"My take on the AdventureWorks dataset; featuring database creation, data modeling in Power BI and python scripting\"\nauthor: \"Edun Joshua\"\ndate: \"2022-05-28\"\ntoc: true\ncategories: [python, data visualisation]\nimage: \"dashboard.png\"\n---\n\n## About The Project üç™\n\n<div>\n\n\n```{=html}\n<iframe title=\"adventureworks\" width=\"600\" height=\"373.5\" src=\"https://app.powerbi.com/\nview?\nr=eyJrIjoiNzEwMmY3OWMtNmU3Zi00ZWU3LWFkNmYtYjQ1NGMwZjBjNjNiIiwidCI6ImRmODY3O\nWNkLWE4MGUtNDVkOC05OWFjLWM4M2VkN2ZmOTVhMCJ9&amp;embedImagePlaceholder=true\" frameborder=\"0\" allowFullScreen=\"true\">\n```\n\n</iframe>\n\n</div>\n\n### Requirement Gathering\n\nClient wants a dashboard monitoring sales of company's product\n\n#### a. Primary KPIs\n\n-   Top ten customers, filtered by:\n    -   product name\n    -   product category\n    -   product status\n    -   product line\n-   Top ten products by sales, filtered by:\n    -   product name\n    -   product category\n    -   product status\n    -   product line\n\n#### b. Secondary KPIs\n\n-   Total sales by category\n\n-   Daily sales trend\n\n-   \n\n## Identifying Stakeholders üßëüèΩ‚Äçüíº\n\n-   Sales team\n-   Marketing Department\n\n### Understanding Raw Data ü•©\n\nThe raw data exists in 9 CSV files representing 1 fact table and 8 dimension tables\n\n| Table                 | description (datatype)                                           |\n|-----------------------|------------------------------------------------------------------|\n| Budget                | details budget of each product and product categories per period |\n| BudgetPeriod          | date table for the budget table                                  |\n| customer              | each row records a customer information                          |\n| dimdates              | date table for the fact table                                    |\n| dimProductCategory    | records the various product categories available                 |\n| dimProductSubCategory | lists the product subcategories available                        |\n| product               | lists individual products                                        |\n| Sales                 | The fact table: records individual sales transaction             |\n| Territory             | Lists regional locations                                         |\n\n### Converting CSV to SQL INSERT statements with Python üêç\n\nI wrote a Python script using the `csv` and `os` modules, that takes in a `csv` file and outputs an SQL file with INSERT statements for each row in the CSV.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport csv\nimport os\n\ndef escape_quotes(value):\n    # Escape single quotes within a value by doubling them\n    return value.replace(\"'\", \"''\")\n\ndef convert_csv_to_sql(csv_file):\n    try:\n        # Extract table name from CSV file name\n        table_name = os.path.splitext(os.path.basename(csv_file))[0].lower()\n        \n        # Open the CSV file for reading\n        with open(csv_file, 'r') as csvfile:\n            # Create a CSV reader object\n            reader = csv.reader(csvfile)\n            \n            # Extract the header row and column names\n            headers = next(reader)\n            columns = ', '.join(headers)\n            \n            # Generate the output SQL file name\n            sql_file = f\"{table_name}.sql\"\n            \n            # Create the results folder if it doesn't exist\n            os.makedirs('results', exist_ok=True)\n            \n            # Update the SQL file path to include the results folder\n            sql_file = os.path.join('results', sql_file)\n            \n            # Create the SQL file for writing\n            with open(sql_file, 'w') as sqlfile:\n                # Initialize a list to store values for each row\n                all_values = []\n                \n                # Iterate over the CSV rows\n                for row in reader:\n                    # Prepare the values for the insert statement, escaping single quotes\n                    values = []\n                    for header, value in zip(headers, row):\n                        if header.lower() == 'id' or header.lower().endswith('_id') or header.lower() == 'quantity' or header.lower() == 'unit_price':\n                            # For 'id' columns and columns ending with '_id', insert the value as is (without quotes):\n                            values.append(value)\n                        elif value == '':\n                            # Insert NULL for blank values\n                            values.append('NULL')\n                        else:\n                            # Escape single quotes for other columns\n                            values.append(f\"'{escape_quotes(value)}'\")\n                    \n                    # Append the values for the current row to the list\n                    all_values.append(f\"({', '.join(values)})\")\n\n                # Generate the final SQL insert statement with multiple value sets\n                sql_insert = f\"INSERT INTO {table_name} ({columns}) VALUES {', '.join(all_values)};\\n\"\n                \n                # Write the SQL insert statement to the SQL file\n                sqlfile.write(sql_insert)\n                \n                print(f\"Conversion completed successfully. SQL file '{sql_file}' generated.\")\n    \n    except FileNotFoundError:\n        print(\"The specified CSV file does not exist.\")\n    \n    except Exception as e:\n        print(f\"An error occurred during the conversion: {str(e)}\")\n\n\nfiles = [\"customer.csv\",\"department.csv\",\"employee.csv\",\"employee_product.csv\",\"orders.csv\",\"product.csv\"]\n\nfor file in files:\n\tconvert_csv_to_sql(file)\nprint(\"\\nConversion Completed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe specified CSV file does not exist.\nThe specified CSV file does not exist.\nThe specified CSV file does not exist.\nThe specified CSV file does not exist.\nThe specified CSV file does not exist.\nThe specified CSV file does not exist.\n\nConversion Completed\n```\n:::\n:::\n\n\n### Loading into database üß∫\n\na MySQL database was created to host the data. The ERD is shown below and using MySQL's built-in GUI tool, it was converted into a database schema\n\n![](Adw%20ERD.png){fig-align=\"center\"}\n\nTo lessen the load on the BI tool further down the pipeline, and to make modelling easier, I created 4 views on top of the data (dim_customer, dim_calendar, dim_product and fact_sales)\n\n### Data cleansing üßπ\n\nIssues - No major cleaning issues; data was loaded directly into the BI tool\n\n### Data Modeling üèõ\n\nThe following star schema was created for the data model in Power BI\n\n![](Adw%20data%20model.png){fig-align=\"center\" width=\"643\"}\n\n### Data Visualization üé®\n\n-   Power BI magic!‚ú®\n\n    The following DAX measures were used:\n\n```         \nNon-Null Days = \nCALCULATE(\n    COUNTROWS('awdb dim_calendar'),\n    NOT(ISBLANK('awdb dim_calendar'[Day]))\n)\n\nTop 10 Customers by Sales = \nIF(RANKX(ALL('awdb dim_customer'[fullname]), [Total Sales],,DESC)<=10,[Total Sales], BLANK())\n\nTop 10 Products by Sales = \nIF(RANKX(ALL('awdb dim_product'[product_name]), [Total Sales],,DESC)<=10,[Total Sales], BLANK())\n\nTotal Sales = \nSUM('awdb fact_sales'[SalesAmount])\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}