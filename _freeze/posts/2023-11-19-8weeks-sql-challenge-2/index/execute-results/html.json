{
  "hash": "84a9892d327156a5746cdfdec6f2087d",
  "result": {
    "markdown": "---\ntitle: \"Pizza Runner\"\nsubtitle: \"Second part of a series of SQL case studies where I use Postgres SQL to answer a bunch of business questions\"\nauthor: \"Edun Joshua\"\ndate: \"2023-11-19\"\ncategories: [sql]\nimage: \"image.PNG\"\n---\n\n\n## Introduction\n\nMonitoring KPIs of a pizza delivery business\n\n## Entity Relationship Diagram\n\n![](images/pizza.jpg)\n\n## Database Connection\n\nFirst, I'll create a connection to my local `postgres` database thanks to the **`RPostgres`** package.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# | warning: false\n# Creating a connection to my local postgres database\nlibrary(RPostgres)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'RPostgres' was built under R version 4.3.2\n```\n:::\n\n```{.r .cell-code}\ncon <-\n  dbConnect(Postgres(),\n            dbname = \"pizza_runner\",\n            user = \"postgres\",\n            password = my_password)\n```\n:::\n\n\n## Queries\n\n### A. Pizza Metrics\n\n#### 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect count(pizza_id)\nfrom customer_orders;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|    14|\n\n</div>\n:::\n\n\n#### 2. How many unique customer orders were made?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nSELECT count(DISTINCT order_id) from customer_orders;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|    10|\n\n</div>\n:::\n\n\n#### 3. How many successful orders were delivered by each runner?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nselect runner_id,\n    count(order_id) as count_of_successful_orders\nfrom runner_orders\nWHERE cancellation is NULL\n    or cancellation not IN (\n        'Restaurant Cancellation',\n        'Customer Cancellation'\n    )\nGROUP BY runner_id;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| runner_id| count_of_successful_orders|\n|---------:|--------------------------:|\n|         3|                          1|\n|         2|                          3|\n|         1|                          4|\n\n</div>\n:::\n\n\n#### 4. How many of each type of pizza was delivered?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nselect pn.pizza_name as pizza,\n    count(co.pizza_id) as count_of_pizza_delivered\nfrom customer_orders co\n    INNER JOIN runner_orders ro on co.order_id = ro.order_id\n    INNER JOIN pizza_names pn on pn.pizza_id = co.pizza_id\nWHERE cancellation is NULL\n    or cancellation not IN (\n        'Restaurant Cancellation',\n        'Customer Cancellation'\n    )\nGROUP by pn.pizza_name;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|pizza      | count_of_pizza_delivered|\n|:----------|------------------------:|\n|Meatlovers |                        9|\n|Vegetarian |                        3|\n\n</div>\n:::\n\n\n#### 5. How many Vegetarian and Meatlovers were ordered by each customer?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nselect co.customer_id as customers, count(co.pizza_id) as count_of_pizza_ordered from customer_orders co INNER JOIN pizza_names pn on pn.pizza_id = co.pizza_id group by 1;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n| customers| count_of_pizza_ordered|\n|---------:|----------------------:|\n|       101|                      3|\n|       103|                      4|\n|       104|                      3|\n|       105|                      1|\n|       102|                      3|\n\n</div>\n:::\n\n\n#### 6. What was the maximum number of pizzas delivered in a single order?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nselect ro.order_id as order,\n    count(co.pizza_id) as number_of_pizzas\nfrom runner_orders ro\n    INNER JOIN customer_orders co ON ro.order_id = co.order_id\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 1;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| order| number_of_pizzas|\n|-----:|----------------:|\n|     4|                3|\n\n</div>\n:::\n\n\n#### 7. For each customer, how many delivered pizzas had at least 1 change and how many? and no changes?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- PART 1\n-- delivered orders\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\n-- orders with at least 1 changes\ncte2 as (\n    select *\n    from customer_orders\n    where exclusions <> ''\n        and extras <> ''\n        or (\n            exclusions not in ('', 'null')\n            or extras not in ('', 'null', null)\n        )\n)\nselect cte2.customer_id,\n    count(pizza_id) delivered_pizzas_with_changes\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id\nGROUP BY 1;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 4 records\n\n| customer_id| delivered_pizzas_with_changes|\n|-----------:|-----------------------------:|\n|         102|                             1|\n|         105|                             1|\n|         104|                             3|\n|         103|                             3|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- PART 2: orders with no changes\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\ncte2 as (\n    select *\n    from customer_orders\n    where exclusions = ''\n        and extras = ''\n        or (\n            exclusions in ('', 'null')\n            or extras in ('', 'null', null)\n        )\n)\nselect cte2.customer_id,\n    count(pizza_id) delivered_pizzas_with_no_changes\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id\nGROUP BY 1;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|customer_id | delivered_pizzas_with_no_changes|\n|:-----------|--------------------------------:|\n|101         |                                2|\n|102         |                                3|\n|103         |                                3|\n|104         |                                2|\n|105         |                                1|\n\n</div>\n:::\n\n\n#### 8. How many pizzas were delivered that had both exclusions and extras?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\n-- delivered orders\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\n-- orders with both exclusions and extras\ncte2 as (\n    select *\n    from customer_orders\n    where (\n            exclusions <> 'null'\n            and extras <> 'null'\n        )\n        and exclusions <> ''\n        and extras <> ''\n)\nselect *\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| order_id| runner_id|pickup_time         |distance |duration  |cancellation | order_id..7| customer_id| pizza_id|exclusions |extras |order_time          |\n|--------:|---------:|:-------------------|:--------|:---------|:------------|-----------:|-----------:|--------:|:----------|:------|:-------------------|\n|       10|         1|2020-01-11 18:50:20 |10km     |10minutes |null         |          10|         104|        1|2, 6       |1, 4   |2020-01-11 18:34:49 |\n\n</div>\n:::\n\n\n#### 9. What was the total volume of pizzas ordered for each hour of the day?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nselect EXTRACT (\n        hour\n        from order_time\n    ) as hour_of_day,\n    count(pizza_id) as pizza_volume\nfrom customer_orders\nGROUP BY 1;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 6 records\n\n| hour_of_day| pizza_volume|\n|-----------:|------------:|\n|          18|            3|\n|          21|            3|\n|          23|            3|\n|          13|            3|\n|          19|            1|\n|          11|            1|\n\n</div>\n:::\n\n\n#### 10. What was the volume of orders for each day of the week?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- select EXTRACT (\n--        dow\n--        from order_time\n--    ) as day_of_week,\n--    count(pizza_id) as pizza_volume\n-- from customer_orders\n-- GROUP BY 1;\n-- or\nselect to_char(order_time, 'Day') as day_of_week,\n    count(pizza_id) as pizza_volume\nfrom customer_orders\nGROUP BY 1;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 4 records\n\n|day_of_week | pizza_volume|\n|:-----------|------------:|\n|Saturday    |            5|\n|Thursday    |            3|\n|Friday      |            1|\n|Wednesday   |            5|\n\n</div>\n:::\n\n\n### B. Runner and Customer Experience\n\n#### 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nselect EXTRACT(\n        week\n        from registration_date\n    ),\n    count(runner_id)\nfrom runners\nGROUP BY 1;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| extract| count|\n|-------:|-----:|\n|       1|     1|\n|      53|     2|\n|       2|     1|\n\n</div>\n:::\n\n\n#### 2. What was the average time in minutes it took for each runner to arrive at the Pizza -- Runner HQ to pickup the order?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect case\n        when ro.pickup_time = 'null' then null\n        else round(\n            EXTRACT(\n                epoch\n                from (\n                        ro.pickup_time::TIMESTAMP - co.order_time::TIMESTAMP\n                    )\n            ) / 60,\n            2\n        )\n    end as duration_till_pickup,\n    ro.pickup_time,\n    co.order_time\nfrom customer_orders co\n    INNER JOIN runner_orders ro on co.order_id = ro.order_id; \n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| duration_till_pickup|pickup_time         |order_time          |\n|--------------------:|:-------------------|:-------------------|\n|                10.53|2020-01-01 18:15:34 |2020-01-01 18:05:02 |\n|                10.03|2020-01-01 19:10:54 |2020-01-01 19:00:52 |\n|                21.23|2020-01-03 00:12:37 |2020-01-02 23:51:23 |\n|                21.23|2020-01-03 00:12:37 |2020-01-02 23:51:23 |\n|                29.28|2020-01-04 13:53:03 |2020-01-04 13:23:46 |\n|                29.28|2020-01-04 13:53:03 |2020-01-04 13:23:46 |\n|                29.28|2020-01-04 13:53:03 |2020-01-04 13:23:46 |\n|                10.47|2020-01-08 21:10:57 |2020-01-08 21:00:29 |\n|                   NA|null                |2020-01-08 21:03:13 |\n|                10.27|2020-01-08 21:30:45 |2020-01-08 21:20:29 |\n\n</div>\n:::\n\n\nThis query calculates the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pick up the order. It first joins the `customer_orders` and `runner_orders` tables to get the order information and the runner's pickup time. Then, it checks if the `pickup_time` is null, and if so, it sets the corresponding `duration_till_pickup` to null. Otherwise, it calculates the time difference between the `pickup_time` and the `order_time` in seconds using the `EXTRACT()` and `TIMESTAMP()`functions. It then converts the time difference to minutes and rounds it to two decimal places. Finally, it selects the `duration_till_pickup`, `pickup_time`, and `order_time` for each order.\n\n#### 3. What was the average time in minutes it took for each runner to deliver pizzas?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nselect runner_id,\n    round(\n        avg(\n            case\n                when left(duration, 2) ~ '^\\d+$' THEN cast(left(duration, 2) as integer)\n                else null\n            end\n        ),\n        2\n    ) as extracted_minutes\nfrom runner_orders\ngroup by runner_id;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| runner_id| extracted_minutes|\n|---------:|-----------------:|\n|         3|             15.00|\n|         2|             26.67|\n|         1|             22.25|\n\n</div>\n:::\n\n\n#### 5. What was the difference between the longest and shortest delivery times for all?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\n-- If we define delivery times as the duration between ro.pickup_time - co.order_time + ro.duration\n-- then:\nwith cte1 as (\n    select case\n            when ro.pickup_time = 'null' then null\n            else round(\n                EXTRACT(\n                    epoch\n                    from (\n                            ro.pickup_time::TIMESTAMP - co.order_time::TIMESTAMP\n                        )\n                ) / 60,\n                2\n            )\n        end as duration_till_pickup,\n        ro.pickup_time,\n        co.order_time,\n        round(\n            case\n                when left(ro.duration, 2) ~ '^\\d+$' THEN cast(left(ro.duration, 2) as integer)\n                else null\n            end,\n            2\n        ) as cleaned_duration_minutes\n    from customer_orders co\n        INNER JOIN runner_orders ro on co.order_id = ro.order_id\n)\nselect max(duration_till_pickup + cleaned_duration_minutes) as longest_delivery_time,\n    min(duration_till_pickup + cleaned_duration_minutes) as shortest_delivery_time,\n    max(duration_till_pickup + cleaned_duration_minutes) - min(duration_till_pickup + cleaned_duration_minutes) as difference\nfrom cte1;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| longest_delivery_time| shortest_delivery_time| difference|\n|---------------------:|----------------------:|----------:|\n|                 69.28|                  25.47|      43.81|\n\n</div>\n:::\n\n\nNow, this is a monstrous looking one 😅 .\n\nA (CTE) named `cte1` is created, extracting relevant information such as `duration_till_pickup`, `pickup_time`, `order_time`, and `cleaned_duration_minutes` from the `customer_orders` (co) and `runner_orders` (ro) tables. The `duration_till_pickup` is calculated as the time between pickup and order in minutes. The `cleaned_duration_minutes` extracts the duration in minutes from the ro.`duration` field.\n\nThe main query then computes the maximum, minimum, and the difference between the sum of `duration_till_pickup` and `cleaned_duration_minutes`. These values represent the longest, shortest, and the time difference between delivery times for all orders.\n\n#### 6. What was the average speed for each runner for each delivery and do you notice -- any trend for these values?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nwith cte as (\n    select runner_id,\n        case\n            when distance ~ '.*' THEN cast(substring(distance, '[0-9\\-+\\.]+') as float)\n            else null\n        end as cleaned_distance_km,\n        case\n            when duration ~ '.*' THEN cast(substring(duration, '[0-9\\-+\\.]+') as float) / 60\n            else null\n        end as cleaned_duration_hr\n    from runner_orders\n)\nselect runner_id,\n    avg(cleaned_distance_km / cleaned_duration_hr) as speed_km_hr\nfrom cte\ngroup by 1;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| runner_id| speed_km_hr|\n|---------:|-----------:|\n|         3|    40.00000|\n|         2|    62.90000|\n|         1|    45.53611|\n\n</div>\n:::\n\n\nThis psql query calculates the average speed for each runner for each delivery. It uses a CTE named `cte` to clean and extract relevant information such as `cleaned_distance_km` and `cleaned_duration_hr` from the `runner_orders` table. The main query then computes the average speed (`cleaned_distance_km` / `cleaned_duration_hr`) for each runner and presents the results grouped by runner_id. This allows you to observe trends in the average speed of each runner across their deliveries.\n\n#### 7. What is the successful delivery percentage for each runner?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith part as (\n    select cte.runner_id,\n        count(*) as part_cancel\n    from (\n            select runner_id,\n                nullif(cancellation, '') || nullif(cancellation, 'null') as cancel\n            from runner_orders\n        ) cte\n    where cancel is null\n    group by runner_id\n),\nwhole as (\n    select runner_id,\n        count(*) as whole_cancel\n    from (\n            select runner_id,\n                nullif(cancellation, '') || nullif(cancellation, 'null') as cancel\n            from runner_orders\n        ) cte\n    group by runner_id\n)\nselect p.runner_id,\n    case\n        when w.whole_cancel = 0 then null\n        else round(\n            (p.part_cancel::numeric / w.whole_cancel) * 100,\n            2\n        )\n    end as percent\nfrom part p\n    inner join whole w on p.runner_id = w.runner_id;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| runner_id| percent|\n|---------:|-------:|\n|         3|      50|\n|         2|      75|\n|         1|     100|\n\n</div>\n:::\n\n\n### C. Ingredient Optimisation\n\n#### 1. What are the standard ingredients for each pizza?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nselect pn.pizza_name, pt.topping_name\nfrom pizza_names pn inner join new_pizza_recipes np\non pn.pizza_id = np.pizza_id\ninner join pizza_toppings pt on pt.topping_id::text = ANY (np.toppings)\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|pizza_name |topping_name |\n|:----------|:------------|\n|Meatlovers |Bacon        |\n|Meatlovers |BBQ Sauce    |\n|Meatlovers |Beef         |\n|Meatlovers |Cheese       |\n|Meatlovers |Chicken      |\n|Meatlovers |Mushrooms    |\n|Meatlovers |Pepperoni    |\n|Meatlovers |Salami       |\n|Vegetarian |Cheese       |\n|Vegetarian |Mushrooms    |\n\n</div>\n:::\n\n\n### D. Pricing and Ratings\n\n#### 1. If a Meat Lovers pizza costs \\$12 and Vegetarian costs \\$10 and there were no charges for changes, how much money has Pizza Runner made so far if there are no delivery fees?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Creating a view of cleaned data\nCREATE OR REPLACE VIEW clean_runner_orders AS\nselect order_id,\n    runner_id,\n    CASE\n        WHEN pickup_time = 'null' THEN NULL\n        ELSE pickup_time::TIMESTAMP\n    END,\n    cast(substring(distance, '[0-9\\-+\\.]+') as float) as distance,\n    cast(substring(duration, '[0-9\\-+\\.]+') as float) as duration,\n    nullif(cancellation, '') || nullif(cancellation, 'null') as cancellation\nfrom runner_orders;\n--\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith cte1 as (\n    select co.pizza_id,\n        count(co.pizza_id) as quantity_sold\n    from clean_runner_orders ro\n        inner join customer_orders co on co.order_id = ro.order_id\n    where cancellation is null\n    GROUP BY 1\n)\nselect pizza_id,\n    quantity_sold * price as revenue\nfrom (\n        select *,\n            CASE\n                WHEN cte1.pizza_id = 1 THEN 12\n                WHEN cte1.pizza_id = 2 THEN 10\n            END AS price\n        from cte1\n    ) sq\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|pizza_id | revenue|\n|:--------|-------:|\n|1        |     108|\n|2        |      30|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Creating a random integer generator\ncreate or replace function random_between(low int, high int) returns int as $$ begin return floor(random() * (high - low + 1) + low);\nend;\n$$ language 'plpgsql' STRICT;\n```\n:::\n\n\n#### 2. If a Meat Lovers pizza was \\$12 and Vegetarian \\$10 fixed prices with no cost for extras and each runner is paid \\$0.30 per kilometre travelled, how much money does Pizza Runner have left over after these deliveries?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith cte as (\n    select co.pizza_id,\n        ro.distance * 0.3 as runner_cost,\n        CASE\n            WHEN co.pizza_id = 1 THEN 12\n            WHEN co.pizza_id = 2 THEN 10\n        END AS price\n    from clean_runner_orders ro\n        inner join customer_orders co on co.order_id = ro.order_id\n    where cancellation is null\n)\nselect sum(price) revenue,\n    round(sum(runner_cost)::numeric, 2) cost,\n    round(sum(price) - sum(runner_cost)::numeric, 2) profit\nfrom cte\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| revenue|  cost| profit|\n|-------:|-----:|------:|\n|     138| 64.62|  73.38|\n\n</div>\n:::\n\n\n## Closing the connection\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}