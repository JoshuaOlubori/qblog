---
title: "Data Bank"
subtitle: "Fourth part of a series of SQL case studies... more CTEs!"
author: "Edun Joshua"
date: "2023-11-19"
categories: [sql]
image: "image.PNG"
---

::: {style="color: #25D366;"}
## Introduction
:::

Data Bank runs just like any other digital bank - but with a distributed data storage platform. Customers are allocated cloud data storage limits which are directly linked to how much money they have in their accounts. The management team at Data Bank want to increase their total customer base - but also need some help tracking just how much data storage their customers will need. This case study is all about calculating metrics, growth and helping the business analyse their data in a smart way to better forecast and plan for their future developments!

::: {style="color: #25D366;"}
## Entity Relationship Diagram
:::

![](images/databank.jpg)

::: {style="color: #25D366;"}
## Database Connection
:::

First, I'll create a connection to my local `postgres` database thanks to the **`RPostgres`** package.

```{r,echo=FALSE}
my_password <- "pluto"

```

```{r}
# | warning: false
# Creating a connection to my local postgres database
library(RPostgres)
con <-
  dbConnect(Postgres(),
            dbname = "data_bank",
            user = "postgres",
            password = my_password)


```

::: {style="color: #25D366"}
## Queries
:::

### A. Customer Nodes Exploration

#### 1. How many unique nodes are there on the Data Bank system?

```{sql connection=con}
select count(DISTINCT node_id) as unique_nodes
from customer_nodes;
```

#### 2. What is the number of nodes per region?

```{sql connection=con}
select region_id,
    count(DISTINCT node_id) as nodes_per_region
from customer_nodes
GROUP BY region_id;
```

#### 3. How many customers are allocated to each region?

```{sql connection=con}
select r.region_name,
    count(distinct cn.customer_id) as customers_per_region
from customer_nodes cn
    natural JOIN regions r
GROUP BY region_name;

```

#### 4. How many days on average are customers reallocated to a different node?

```{sql connection=con}
with cte1 as(
    select customer_id,
        node_id,
        lead(node_id) over(
            partition by customer_id
            order by start_date
        ) as lead_node,
        start_date,
        lead(start_date) over(
            partition by customer_id
            order by start_date
        ) as lead_date
    from customer_nodes
),
cte2 as (
    select lead_date - start_date as days_btw_next_node
    from cte1
)
select round(avg(days_btw_next_node)::numeric, 2) as average_reallocation_period
from cte2;
```

#### 5. What is the median, 80th and 95th percentile for this same reallocation days metric for each region?

```{sql connection=con}
with cte1 as(
    select customer_id,
        region_id,
        node_id,
        lead(node_id) over(
            partition by customer_id
            order by start_date
        ) as lead_node,
        start_date,
        lead(start_date) over(
            partition by customer_id
            order by start_date
        ) as lead_date
    from customer_nodes
),
cte2 as(
    select *,
        lead_date - start_date as days_btw_next_node
    from cte1
)
select region_id,
    percentile_disc (0.5) within group (
        order by days_btw_next_node
    ) as median_realloc_metric,
    percentile_disc (0.8) within group (
        order by days_btw_next_node
    ) as pctile_80_realloc_metric,
    percentile_disc (0.95) within group (
        order by days_btw_next_node
    ) as pctile_95_realloc_metric
from cte2
GROUP BY 1;

```

### B. Customer Transactions

#### 1. What is the unique count and total amount for each transaction type?

```{sql connection=con}
select txn_type as transaction_type, count(distinct (customer_id, txn_date, txn_amount, txn_amount)) as txn_dcount, sum(txn_amount) as txn_amount_sum
from customer_transactions
group by 1;
```

#### 2. What is the average total historical deposit counts and amounts for all customers?

```{sql connection=con}
select avg(txn_amount) as avg_historical_deposit_counts ,count(txn_type) as deposit_counts
from customer_transactions
where txn_type = 'deposit';
```

### Closing the connection

```{r}
dbDisconnect(con)
```
