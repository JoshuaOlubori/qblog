{"title":"Pizza Runner","markdown":{"yaml":{"title":"Pizza Runner","subtitle":"Second part of a series of SQL case studies where I use Postgres SQL to answer a bunch of business questions","author":"Edun Joshua","date":"2023-11-19","categories":["sql"],"image":"image.PNG"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nMonitoring KPIs of a pizza delivery business\n\n## Entity Relationship Diagram\n\n![](images/pizza.jpg)\n\n## Database Connection\n\nFirst, I'll create a connection to my local `postgres` database thanks to the **`RPostgres`** package.\n\n```{r,echo=FALSE}\nmy_password <- \"pluto\"\n\n```\n\n```{r}\n# | warning: false\n# Creating a connection to my local postgres database\nlibrary(RPostgres)\ncon <-\n  dbConnect(Postgres(),\n            dbname = \"pizza_runner\",\n            user = \"postgres\",\n            password = my_password)\n```\n\n## Queries\n\n### A. Pizza Metrics\n\n#### 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)\n\n```{sql connection=con}\nselect count(pizza_id)\nfrom customer_orders;\n\n```\n\n#### 2. How many unique customer orders were made?\n\n```{sql connection=con}\n\nSELECT count(DISTINCT order_id) from customer_orders;\n\n```\n\n#### 3. How many successful orders were delivered by each runner?\n\n```{sql connection=con}\n\nselect runner_id,\n    count(order_id) as count_of_successful_orders\nfrom runner_orders\nWHERE cancellation is NULL\n    or cancellation not IN (\n        'Restaurant Cancellation',\n        'Customer Cancellation'\n    )\nGROUP BY runner_id;\n```\n\n#### 4. How many of each type of pizza was delivered?\n\n```{sql connection=con}\n\nselect pn.pizza_name as pizza,\n    count(co.pizza_id) as count_of_pizza_delivered\nfrom customer_orders co\n    INNER JOIN runner_orders ro on co.order_id = ro.order_id\n    INNER JOIN pizza_names pn on pn.pizza_id = co.pizza_id\nWHERE cancellation is NULL\n    or cancellation not IN (\n        'Restaurant Cancellation',\n        'Customer Cancellation'\n    )\nGROUP by pn.pizza_name;\n\n```\n\n#### 5. How many Vegetarian and Meatlovers were ordered by each customer?\n\n```{sql connection=con}\n\nselect co.customer_id as customers, count(co.pizza_id) as count_of_pizza_ordered from customer_orders co INNER JOIN pizza_names pn on pn.pizza_id = co.pizza_id group by 1;\n```\n\n#### 6. What was the maximum number of pizzas delivered in a single order?\n\n```{sql connection=con}\n\nselect ro.order_id as order,\n    count(co.pizza_id) as number_of_pizzas\nfrom runner_orders ro\n    INNER JOIN customer_orders co ON ro.order_id = co.order_id\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 1;\n```\n\n#### 7. For each customer, how many delivered pizzas had at least 1 change and how many? and no changes?\n\n```{sql connection=con}\n-- PART 1\n-- delivered orders\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\n-- orders with at least 1 changes\ncte2 as (\n    select *\n    from customer_orders\n    where exclusions <> ''\n        and extras <> ''\n        or (\n            exclusions not in ('', 'null')\n            or extras not in ('', 'null', null)\n        )\n)\nselect cte2.customer_id,\n    count(pizza_id) delivered_pizzas_with_changes\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id\nGROUP BY 1;\n\n```\n\n```{sql connection=con}\n-- PART 2: orders with no changes\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\ncte2 as (\n    select *\n    from customer_orders\n    where exclusions = ''\n        and extras = ''\n        or (\n            exclusions in ('', 'null')\n            or extras in ('', 'null', null)\n        )\n)\nselect cte2.customer_id,\n    count(pizza_id) delivered_pizzas_with_no_changes\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id\nGROUP BY 1;\n```\n\n#### 8. How many pizzas were delivered that had both exclusions and extras?\n\n```{sql connection=con}\n\n-- delivered orders\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\n-- orders with both exclusions and extras\ncte2 as (\n    select *\n    from customer_orders\n    where (\n            exclusions <> 'null'\n            and extras <> 'null'\n        )\n        and exclusions <> ''\n        and extras <> ''\n)\nselect *\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id;\n\n```\n\n#### 9. What was the total volume of pizzas ordered for each hour of the day?\n\n```{sql connection=con}\n\nselect EXTRACT (\n        hour\n        from order_time\n    ) as hour_of_day,\n    count(pizza_id) as pizza_volume\nfrom customer_orders\nGROUP BY 1;\n```\n\n#### 10. What was the volume of orders for each day of the week?\n\n```{sql connection=con}\n-- select EXTRACT (\n--        dow\n--        from order_time\n--    ) as day_of_week,\n--    count(pizza_id) as pizza_volume\n-- from customer_orders\n-- GROUP BY 1;\n-- or\nselect to_char(order_time, 'Day') as day_of_week,\n    count(pizza_id) as pizza_volume\nfrom customer_orders\nGROUP BY 1;\n\n```\n\n### B. Runner and Customer Experience\n\n#### 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)\n\n```{sql connection=con}\n\nselect EXTRACT(\n        week\n        from registration_date\n    ),\n    count(runner_id)\nfrom runners\nGROUP BY 1;\n```\n\n#### 2. What was the average time in minutes it took for each runner to arrive at the Pizza -- Runner HQ to pickup the order?\n\n```{sql connection=con}\nselect case\n        when ro.pickup_time = 'null' then null\n        else round(\n            EXTRACT(\n                epoch\n                from (\n                        ro.pickup_time::TIMESTAMP - co.order_time::TIMESTAMP\n                    )\n            ) / 60,\n            2\n        )\n    end as duration_till_pickup,\n    ro.pickup_time,\n    co.order_time\nfrom customer_orders co\n    INNER JOIN runner_orders ro on co.order_id = ro.order_id; \n```\n\nThis query calculates the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pick up the order. It first joins the `customer_orders` and `runner_orders` tables to get the order information and the runner's pickup time. Then, it checks if the `pickup_time` is null, and if so, it sets the corresponding `duration_till_pickup` to null. Otherwise, it calculates the time difference between the `pickup_time` and the `order_time` in seconds using the `EXTRACT()` and `TIMESTAMP()`functions. It then converts the time difference to minutes and rounds it to two decimal places. Finally, it selects the `duration_till_pickup`, `pickup_time`, and `order_time` for each order.\n\n#### 3. What was the average time in minutes it took for each runner to deliver pizzas?\n\n```{sql connection=con}\n\nselect runner_id,\n    round(\n        avg(\n            case\n                when left(duration, 2) ~ '^\\d+$' THEN cast(left(duration, 2) as integer)\n                else null\n            end\n        ),\n        2\n    ) as extracted_minutes\nfrom runner_orders\ngroup by runner_id;\n```\n\n#### 5. What was the difference between the longest and shortest delivery times for all?\n\n```{sql connection=con}\n\n-- If we define delivery times as the duration between ro.pickup_time - co.order_time + ro.duration\n-- then:\nwith cte1 as (\n    select case\n            when ro.pickup_time = 'null' then null\n            else round(\n                EXTRACT(\n                    epoch\n                    from (\n                            ro.pickup_time::TIMESTAMP - co.order_time::TIMESTAMP\n                        )\n                ) / 60,\n                2\n            )\n        end as duration_till_pickup,\n        ro.pickup_time,\n        co.order_time,\n        round(\n            case\n                when left(ro.duration, 2) ~ '^\\d+$' THEN cast(left(ro.duration, 2) as integer)\n                else null\n            end,\n            2\n        ) as cleaned_duration_minutes\n    from customer_orders co\n        INNER JOIN runner_orders ro on co.order_id = ro.order_id\n)\nselect max(duration_till_pickup + cleaned_duration_minutes) as longest_delivery_time,\n    min(duration_till_pickup + cleaned_duration_minutes) as shortest_delivery_time,\n    max(duration_till_pickup + cleaned_duration_minutes) - min(duration_till_pickup + cleaned_duration_minutes) as difference\nfrom cte1;\n```\n\nNow, this is a monstrous looking one ðŸ˜… .\n\nA (CTE) named `cte1` is created, extracting relevant information such as `duration_till_pickup`, `pickup_time`, `order_time`, and `cleaned_duration_minutes` from the `customer_orders` (co) and `runner_orders` (ro) tables. The `duration_till_pickup` is calculated as the time between pickup and order in minutes. The `cleaned_duration_minutes` extracts the duration in minutes from the ro.`duration` field.\n\nThe main query then computes the maximum, minimum, and the difference between the sum of `duration_till_pickup` and `cleaned_duration_minutes`. These values represent the longest, shortest, and the time difference between delivery times for all orders.\n\n#### 6. What was the average speed for each runner for each delivery and do you notice -- any trend for these values?\n\n```{sql connection=con}\n\nwith cte as (\n    select runner_id,\n        case\n            when distance ~ '.*' THEN cast(substring(distance, '[0-9\\-+\\.]+') as float)\n            else null\n        end as cleaned_distance_km,\n        case\n            when duration ~ '.*' THEN cast(substring(duration, '[0-9\\-+\\.]+') as float) / 60\n            else null\n        end as cleaned_duration_hr\n    from runner_orders\n)\nselect runner_id,\n    avg(cleaned_distance_km / cleaned_duration_hr) as speed_km_hr\nfrom cte\ngroup by 1;\n\n```\n\nThis psql query calculates the average speed for each runner for each delivery. It uses a CTE named `cte` to clean and extract relevant information such as `cleaned_distance_km` and `cleaned_duration_hr` from the `runner_orders` table. The main query then computes the average speed (`cleaned_distance_km` / `cleaned_duration_hr`) for each runner and presents the results grouped by runner_id. This allows you to observe trends in the average speed of each runner across their deliveries.\n\n#### 7. What is the successful delivery percentage for each runner?\n\n```{sql connection=con}\nwith part as (\n    select cte.runner_id,\n        count(*) as part_cancel\n    from (\n            select runner_id,\n                nullif(cancellation, '') || nullif(cancellation, 'null') as cancel\n            from runner_orders\n        ) cte\n    where cancel is null\n    group by runner_id\n),\nwhole as (\n    select runner_id,\n        count(*) as whole_cancel\n    from (\n            select runner_id,\n                nullif(cancellation, '') || nullif(cancellation, 'null') as cancel\n            from runner_orders\n        ) cte\n    group by runner_id\n)\nselect p.runner_id,\n    case\n        when w.whole_cancel = 0 then null\n        else round(\n            (p.part_cancel::numeric / w.whole_cancel) * 100,\n            2\n        )\n    end as percent\nfrom part p\n    inner join whole w on p.runner_id = w.runner_id;\n\n```\n\n### C. Ingredient Optimisation\n\n#### 1. What are the standard ingredients for each pizza?\n\n```{sql connection=con}\n\nselect pn.pizza_name, pt.topping_name\nfrom pizza_names pn inner join new_pizza_recipes np\non pn.pizza_id = np.pizza_id\ninner join pizza_toppings pt on pt.topping_id::text = ANY (np.toppings)\n\n```\n\n### D. Pricing and Ratings\n\n#### 1. If a Meat Lovers pizza costs \\$12 and Vegetarian costs \\$10 and there were no charges for changes, how much money has Pizza Runner made so far if there are no delivery fees?\n\n```{sql connection=con}\n-- Creating a view of cleaned data\nCREATE OR REPLACE VIEW clean_runner_orders AS\nselect order_id,\n    runner_id,\n    CASE\n        WHEN pickup_time = 'null' THEN NULL\n        ELSE pickup_time::TIMESTAMP\n    END,\n    cast(substring(distance, '[0-9\\-+\\.]+') as float) as distance,\n    cast(substring(duration, '[0-9\\-+\\.]+') as float) as duration,\n    nullif(cancellation, '') || nullif(cancellation, 'null') as cancellation\nfrom runner_orders;\n--\n\n```\n\n```{sql connection=con}\nwith cte1 as (\n    select co.pizza_id,\n        count(co.pizza_id) as quantity_sold\n    from clean_runner_orders ro\n        inner join customer_orders co on co.order_id = ro.order_id\n    where cancellation is null\n    GROUP BY 1\n)\nselect pizza_id,\n    quantity_sold * price as revenue\nfrom (\n        select *,\n            CASE\n                WHEN cte1.pizza_id = 1 THEN 12\n                WHEN cte1.pizza_id = 2 THEN 10\n            END AS price\n        from cte1\n    ) sq\n```\n\n```{sql connection=con}\n-- Creating a random integer generator\ncreate or replace function random_between(low int, high int) returns int as $$ begin return floor(random() * (high - low + 1) + low);\nend;\n$$ language 'plpgsql' STRICT;\n```\n\n#### 2. If a Meat Lovers pizza was \\$12 and Vegetarian \\$10 fixed prices with no cost for extras and each runner is paid \\$0.30 per kilometre travelled, how much money does Pizza Runner have left over after these deliveries?\n\n```{sql connection=con}\nwith cte as (\n    select co.pizza_id,\n        ro.distance * 0.3 as runner_cost,\n        CASE\n            WHEN co.pizza_id = 1 THEN 12\n            WHEN co.pizza_id = 2 THEN 10\n        END AS price\n    from clean_runner_orders ro\n        inner join customer_orders co on co.order_id = ro.order_id\n    where cancellation is null\n)\nselect sum(price) revenue,\n    round(sum(runner_cost)::numeric, 2) cost,\n    round(sum(price) - sum(runner_cost)::numeric, 2) profit\nfrom cte\n```\n\n## Closing the connection\n\n```{r}\ndbDisconnect(con)\n```\n","srcMarkdownNoYaml":"\n\n## Introduction\n\nMonitoring KPIs of a pizza delivery business\n\n## Entity Relationship Diagram\n\n![](images/pizza.jpg)\n\n## Database Connection\n\nFirst, I'll create a connection to my local `postgres` database thanks to the **`RPostgres`** package.\n\n```{r,echo=FALSE}\nmy_password <- \"pluto\"\n\n```\n\n```{r}\n# | warning: false\n# Creating a connection to my local postgres database\nlibrary(RPostgres)\ncon <-\n  dbConnect(Postgres(),\n            dbname = \"pizza_runner\",\n            user = \"postgres\",\n            password = my_password)\n```\n\n## Queries\n\n### A. Pizza Metrics\n\n#### 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)\n\n```{sql connection=con}\nselect count(pizza_id)\nfrom customer_orders;\n\n```\n\n#### 2. How many unique customer orders were made?\n\n```{sql connection=con}\n\nSELECT count(DISTINCT order_id) from customer_orders;\n\n```\n\n#### 3. How many successful orders were delivered by each runner?\n\n```{sql connection=con}\n\nselect runner_id,\n    count(order_id) as count_of_successful_orders\nfrom runner_orders\nWHERE cancellation is NULL\n    or cancellation not IN (\n        'Restaurant Cancellation',\n        'Customer Cancellation'\n    )\nGROUP BY runner_id;\n```\n\n#### 4. How many of each type of pizza was delivered?\n\n```{sql connection=con}\n\nselect pn.pizza_name as pizza,\n    count(co.pizza_id) as count_of_pizza_delivered\nfrom customer_orders co\n    INNER JOIN runner_orders ro on co.order_id = ro.order_id\n    INNER JOIN pizza_names pn on pn.pizza_id = co.pizza_id\nWHERE cancellation is NULL\n    or cancellation not IN (\n        'Restaurant Cancellation',\n        'Customer Cancellation'\n    )\nGROUP by pn.pizza_name;\n\n```\n\n#### 5. How many Vegetarian and Meatlovers were ordered by each customer?\n\n```{sql connection=con}\n\nselect co.customer_id as customers, count(co.pizza_id) as count_of_pizza_ordered from customer_orders co INNER JOIN pizza_names pn on pn.pizza_id = co.pizza_id group by 1;\n```\n\n#### 6. What was the maximum number of pizzas delivered in a single order?\n\n```{sql connection=con}\n\nselect ro.order_id as order,\n    count(co.pizza_id) as number_of_pizzas\nfrom runner_orders ro\n    INNER JOIN customer_orders co ON ro.order_id = co.order_id\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 1;\n```\n\n#### 7. For each customer, how many delivered pizzas had at least 1 change and how many? and no changes?\n\n```{sql connection=con}\n-- PART 1\n-- delivered orders\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\n-- orders with at least 1 changes\ncte2 as (\n    select *\n    from customer_orders\n    where exclusions <> ''\n        and extras <> ''\n        or (\n            exclusions not in ('', 'null')\n            or extras not in ('', 'null', null)\n        )\n)\nselect cte2.customer_id,\n    count(pizza_id) delivered_pizzas_with_changes\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id\nGROUP BY 1;\n\n```\n\n```{sql connection=con}\n-- PART 2: orders with no changes\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\ncte2 as (\n    select *\n    from customer_orders\n    where exclusions = ''\n        and extras = ''\n        or (\n            exclusions in ('', 'null')\n            or extras in ('', 'null', null)\n        )\n)\nselect cte2.customer_id,\n    count(pizza_id) delivered_pizzas_with_no_changes\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id\nGROUP BY 1;\n```\n\n#### 8. How many pizzas were delivered that had both exclusions and extras?\n\n```{sql connection=con}\n\n-- delivered orders\nwith cte1 as (\n    select *\n    from runner_orders\n    where cancellation is null\n        or cancellation in ('null', '')\n),\n-- orders with both exclusions and extras\ncte2 as (\n    select *\n    from customer_orders\n    where (\n            exclusions <> 'null'\n            and extras <> 'null'\n        )\n        and exclusions <> ''\n        and extras <> ''\n)\nselect *\nfrom cte1\n    inner join cte2 on cte1.order_id = cte2.order_id;\n\n```\n\n#### 9. What was the total volume of pizzas ordered for each hour of the day?\n\n```{sql connection=con}\n\nselect EXTRACT (\n        hour\n        from order_time\n    ) as hour_of_day,\n    count(pizza_id) as pizza_volume\nfrom customer_orders\nGROUP BY 1;\n```\n\n#### 10. What was the volume of orders for each day of the week?\n\n```{sql connection=con}\n-- select EXTRACT (\n--        dow\n--        from order_time\n--    ) as day_of_week,\n--    count(pizza_id) as pizza_volume\n-- from customer_orders\n-- GROUP BY 1;\n-- or\nselect to_char(order_time, 'Day') as day_of_week,\n    count(pizza_id) as pizza_volume\nfrom customer_orders\nGROUP BY 1;\n\n```\n\n### B. Runner and Customer Experience\n\n#### 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)\n\n```{sql connection=con}\n\nselect EXTRACT(\n        week\n        from registration_date\n    ),\n    count(runner_id)\nfrom runners\nGROUP BY 1;\n```\n\n#### 2. What was the average time in minutes it took for each runner to arrive at the Pizza -- Runner HQ to pickup the order?\n\n```{sql connection=con}\nselect case\n        when ro.pickup_time = 'null' then null\n        else round(\n            EXTRACT(\n                epoch\n                from (\n                        ro.pickup_time::TIMESTAMP - co.order_time::TIMESTAMP\n                    )\n            ) / 60,\n            2\n        )\n    end as duration_till_pickup,\n    ro.pickup_time,\n    co.order_time\nfrom customer_orders co\n    INNER JOIN runner_orders ro on co.order_id = ro.order_id; \n```\n\nThis query calculates the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pick up the order. It first joins the `customer_orders` and `runner_orders` tables to get the order information and the runner's pickup time. Then, it checks if the `pickup_time` is null, and if so, it sets the corresponding `duration_till_pickup` to null. Otherwise, it calculates the time difference between the `pickup_time` and the `order_time` in seconds using the `EXTRACT()` and `TIMESTAMP()`functions. It then converts the time difference to minutes and rounds it to two decimal places. Finally, it selects the `duration_till_pickup`, `pickup_time`, and `order_time` for each order.\n\n#### 3. What was the average time in minutes it took for each runner to deliver pizzas?\n\n```{sql connection=con}\n\nselect runner_id,\n    round(\n        avg(\n            case\n                when left(duration, 2) ~ '^\\d+$' THEN cast(left(duration, 2) as integer)\n                else null\n            end\n        ),\n        2\n    ) as extracted_minutes\nfrom runner_orders\ngroup by runner_id;\n```\n\n#### 5. What was the difference between the longest and shortest delivery times for all?\n\n```{sql connection=con}\n\n-- If we define delivery times as the duration between ro.pickup_time - co.order_time + ro.duration\n-- then:\nwith cte1 as (\n    select case\n            when ro.pickup_time = 'null' then null\n            else round(\n                EXTRACT(\n                    epoch\n                    from (\n                            ro.pickup_time::TIMESTAMP - co.order_time::TIMESTAMP\n                        )\n                ) / 60,\n                2\n            )\n        end as duration_till_pickup,\n        ro.pickup_time,\n        co.order_time,\n        round(\n            case\n                when left(ro.duration, 2) ~ '^\\d+$' THEN cast(left(ro.duration, 2) as integer)\n                else null\n            end,\n            2\n        ) as cleaned_duration_minutes\n    from customer_orders co\n        INNER JOIN runner_orders ro on co.order_id = ro.order_id\n)\nselect max(duration_till_pickup + cleaned_duration_minutes) as longest_delivery_time,\n    min(duration_till_pickup + cleaned_duration_minutes) as shortest_delivery_time,\n    max(duration_till_pickup + cleaned_duration_minutes) - min(duration_till_pickup + cleaned_duration_minutes) as difference\nfrom cte1;\n```\n\nNow, this is a monstrous looking one ðŸ˜… .\n\nA (CTE) named `cte1` is created, extracting relevant information such as `duration_till_pickup`, `pickup_time`, `order_time`, and `cleaned_duration_minutes` from the `customer_orders` (co) and `runner_orders` (ro) tables. The `duration_till_pickup` is calculated as the time between pickup and order in minutes. The `cleaned_duration_minutes` extracts the duration in minutes from the ro.`duration` field.\n\nThe main query then computes the maximum, minimum, and the difference between the sum of `duration_till_pickup` and `cleaned_duration_minutes`. These values represent the longest, shortest, and the time difference between delivery times for all orders.\n\n#### 6. What was the average speed for each runner for each delivery and do you notice -- any trend for these values?\n\n```{sql connection=con}\n\nwith cte as (\n    select runner_id,\n        case\n            when distance ~ '.*' THEN cast(substring(distance, '[0-9\\-+\\.]+') as float)\n            else null\n        end as cleaned_distance_km,\n        case\n            when duration ~ '.*' THEN cast(substring(duration, '[0-9\\-+\\.]+') as float) / 60\n            else null\n        end as cleaned_duration_hr\n    from runner_orders\n)\nselect runner_id,\n    avg(cleaned_distance_km / cleaned_duration_hr) as speed_km_hr\nfrom cte\ngroup by 1;\n\n```\n\nThis psql query calculates the average speed for each runner for each delivery. It uses a CTE named `cte` to clean and extract relevant information such as `cleaned_distance_km` and `cleaned_duration_hr` from the `runner_orders` table. The main query then computes the average speed (`cleaned_distance_km` / `cleaned_duration_hr`) for each runner and presents the results grouped by runner_id. This allows you to observe trends in the average speed of each runner across their deliveries.\n\n#### 7. What is the successful delivery percentage for each runner?\n\n```{sql connection=con}\nwith part as (\n    select cte.runner_id,\n        count(*) as part_cancel\n    from (\n            select runner_id,\n                nullif(cancellation, '') || nullif(cancellation, 'null') as cancel\n            from runner_orders\n        ) cte\n    where cancel is null\n    group by runner_id\n),\nwhole as (\n    select runner_id,\n        count(*) as whole_cancel\n    from (\n            select runner_id,\n                nullif(cancellation, '') || nullif(cancellation, 'null') as cancel\n            from runner_orders\n        ) cte\n    group by runner_id\n)\nselect p.runner_id,\n    case\n        when w.whole_cancel = 0 then null\n        else round(\n            (p.part_cancel::numeric / w.whole_cancel) * 100,\n            2\n        )\n    end as percent\nfrom part p\n    inner join whole w on p.runner_id = w.runner_id;\n\n```\n\n### C. Ingredient Optimisation\n\n#### 1. What are the standard ingredients for each pizza?\n\n```{sql connection=con}\n\nselect pn.pizza_name, pt.topping_name\nfrom pizza_names pn inner join new_pizza_recipes np\non pn.pizza_id = np.pizza_id\ninner join pizza_toppings pt on pt.topping_id::text = ANY (np.toppings)\n\n```\n\n### D. Pricing and Ratings\n\n#### 1. If a Meat Lovers pizza costs \\$12 and Vegetarian costs \\$10 and there were no charges for changes, how much money has Pizza Runner made so far if there are no delivery fees?\n\n```{sql connection=con}\n-- Creating a view of cleaned data\nCREATE OR REPLACE VIEW clean_runner_orders AS\nselect order_id,\n    runner_id,\n    CASE\n        WHEN pickup_time = 'null' THEN NULL\n        ELSE pickup_time::TIMESTAMP\n    END,\n    cast(substring(distance, '[0-9\\-+\\.]+') as float) as distance,\n    cast(substring(duration, '[0-9\\-+\\.]+') as float) as duration,\n    nullif(cancellation, '') || nullif(cancellation, 'null') as cancellation\nfrom runner_orders;\n--\n\n```\n\n```{sql connection=con}\nwith cte1 as (\n    select co.pizza_id,\n        count(co.pizza_id) as quantity_sold\n    from clean_runner_orders ro\n        inner join customer_orders co on co.order_id = ro.order_id\n    where cancellation is null\n    GROUP BY 1\n)\nselect pizza_id,\n    quantity_sold * price as revenue\nfrom (\n        select *,\n            CASE\n                WHEN cte1.pizza_id = 1 THEN 12\n                WHEN cte1.pizza_id = 2 THEN 10\n            END AS price\n        from cte1\n    ) sq\n```\n\n```{sql connection=con}\n-- Creating a random integer generator\ncreate or replace function random_between(low int, high int) returns int as $$ begin return floor(random() * (high - low + 1) + low);\nend;\n$$ language 'plpgsql' STRICT;\n```\n\n#### 2. If a Meat Lovers pizza was \\$12 and Vegetarian \\$10 fixed prices with no cost for extras and each runner is paid \\$0.30 per kilometre travelled, how much money does Pizza Runner have left over after these deliveries?\n\n```{sql connection=con}\nwith cte as (\n    select co.pizza_id,\n        ro.distance * 0.3 as runner_cost,\n        CASE\n            WHEN co.pizza_id = 1 THEN 12\n            WHEN co.pizza_id = 2 THEN 10\n        END AS price\n    from clean_runner_orders ro\n        inner join customer_orders co on co.order_id = ro.order_id\n    where cancellation is null\n)\nselect sum(price) revenue,\n    round(sum(runner_cost)::numeric, 2) cost,\n    round(sum(price) - sum(runner_cost)::numeric, 2) profit\nfrom cte\n```\n\n## Closing the connection\n\n```{r}\ndbDisconnect(con)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","smooth-scroll":true,"theme":{"light":"journal","dark":"darkly"},"citations-hover":true,"footnotes-hover":true,"title-block-banner":true,"title":"Pizza Runner","subtitle":"Second part of a series of SQL case studies where I use Postgres SQL to answer a bunch of business questions","author":"Edun Joshua","date":"2023-11-19","categories":["sql"],"image":"image.PNG"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}